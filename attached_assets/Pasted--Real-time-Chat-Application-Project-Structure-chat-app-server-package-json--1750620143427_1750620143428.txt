# Real-time Chat Application

## Project Structure
```
chat-app/
├── server/
│   ├── package.json
│   ├── server.js
│   ├── prisma/
│   │   └── schema.prisma
│   └── .env
├── client/
│   ├── package.json
│   ├── src/
│   │   ├── App.js
│   │   ├── components/
│   │   │   ├── Chat.js
│   │   │   ├── MessageList.js
│   │   │   └── MessageInput.js
│   │   └── index.js
│   ├── public/
│   │   └── index.html
│   └── tailwind.config.js
└── README.md
```

## Backend Setup

### server/package.json
```json
{
  "name": "chat-server",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "nodemon server.js",
    "start": "node server.js",
    "db:push": "prisma db push",
    "db:studio": "prisma studio"
  },
  "dependencies": {
    "express": "^4.18.2",
    "ws": "^8.14.2",
    "cors": "^2.8.5",
    "@prisma/client": "^5.3.1",
    "dotenv": "^16.3.1",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "prisma": "^5.3.1",
    "nodemon": "^3.0.1"
  }
}
```

### server/.env
```env
DATABASE_URL="postgresql://username:password@localhost:5432/chatapp"
PORT=3001
```

### server/prisma/schema.prisma
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
```

### server/server.js
```javascript
import express from 'express';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import cors from 'cors';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';
import { v4 as uuidv4 } from 'uuid';

dotenv.config();

const app = express();
const server = createServer(app);
const wss = new WebSocketServer({ server });

const prisma = new PrismaClient();
const clients = new Map(); // Store connected clients with their info

app.use(cors());
app.use(express.json());

// REST API endpoints
app.get('/api/messages', async (req, res) => {
  try {
    const messages = await prisma.message.findMany({
      include: { user: true },
      orderBy: { createdAt: 'asc' },
      take: 50
    });
    res.json(messages);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
});

app.post('/api/users', async (req, res) => {
  const { username } = req.body;
  try {
    const user = await prisma.user.upsert({
      where: { username },
      update: {},
      create: { username }
    });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create user' });
  }
});

// WebSocket handling
wss.on('connection', (ws) => {
  const clientId = uuidv4();
  console.log('User connected:', clientId);

  ws.on('message', async (data) => {
    try {
      const message = JSON.parse(data.toString());

      switch (message.type) {
        case 'join':
          clients.set(clientId, {
            ws,
            username: message.username,
            id: clientId
          });
          
          // Broadcast user joined to all other clients
          broadcastToOthers(clientId, {
            type: 'user_joined',
            username: message.username
          });

          // Send current online users to the new client
          const onlineUsers = Array.from(clients.values())
            .map(client => client.username)
            .filter(username => username !== message.username);
          
          ws.send(JSON.stringify({
            type: 'online_users',
            users: onlineUsers
          }));
          break;

        case 'send_message':
          // Save message to database
          const savedMessage = await prisma.message.create({
            data: {
              content: message.message,
              user: {
                connectOrCreate: {
                  where: { username: message.username },
                  create: { username: message.username }
                }
              }
            },
            include: { user: true }
          });

          // Broadcast message to all clients
          broadcastToAll({
            type: 'receive_message',
            id: savedMessage.id,
            content: savedMessage.content,
            username: savedMessage.user.username,
            createdAt: savedMessage.createdAt
          });
          break;
      }
    } catch (error) {
      console.error('Error handling message:', error);
    }
  });

  ws.on('close', () => {
    const client = clients.get(clientId);
    if (client) {
      // Broadcast user left to all other clients
      broadcastToOthers(clientId, {
        type: 'user_left',
        username: client.username
      });
      clients.delete(clientId);
    }
    console.log('User disconnected:', clientId);
  });

  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
  });
});

// Helper functions
function broadcastToAll(message) {
  const messageStr = JSON.stringify(message);
  clients.forEach((client) => {
    if (client.ws.readyState === 1) { // WebSocket.OPEN
      client.ws.send(messageStr);
    }
  });
}

function broadcastToOthers(excludeClientId, message) {
  const messageStr = JSON.stringify(message);
  clients.forEach((client, clientId) => {
    if (clientId !== excludeClientId && client.ws.readyState === 1) {
      client.ws.send(messageStr);
    }
  });
}

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

## Frontend Setup

### client/package.json
```json
{
  "name": "chat-client",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.5.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "devDependencies": {
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.3.3",
    "autoprefixer": "^10.4.15",
    "postcss": "^8.4.29"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
```

### client/tailwind.config.js
```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

### client/src/index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

### client/src/App.js
```javascript
import React, { useState, useEffect, useRef } from 'react';
import Chat from './components/Chat';
import './index.css';

function App() {
  const [username, setUsername] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [ws, setWs] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');

  const connectWebSocket = () => {
    const websocket = new WebSocket('ws://localhost:3001');
    
    websocket.onopen = () => {
      console.log('Connected to WebSocket server');
      setConnectionStatus('connected');
      setWs(websocket);
    };

    websocket.onclose = () => {
      console.log('Disconnected from WebSocket server');
      setConnectionStatus('disconnected');
      setWs(null);
      
      // Attempt to reconnect after 3 seconds
      setTimeout(() => {
        if (!websocket || websocket.readyState === WebSocket.CLOSED) {
          connectWebSocket();
        }
      }, 3000);
    };

    websocket.onerror = (error) => {
      console.error('WebSocket error:', error);
      setConnectionStatus('error');
    };

    return websocket;
  };

  useEffect(() => {
    const websocket = connectWebSocket();
    
    return () => {
      if (websocket) {
        websocket.close();
      }
    };
  }, []);

  const handleUsernameSubmit = (e) => {
    e.preventDefault();
    if (username.trim() && ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'join',
        username: username.trim()
      }));
      setIsConnected(true);
    }
  };

  if (!isConnected) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md w-96">
          <h1 className="text-2xl font-bold text-center mb-6 text-gray-800">
            Join Chat
          </h1>
          
          {/* Connection Status */}
          <div className="mb-4 text-center">
            <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm ${
              connectionStatus === 'connected' 
                ? 'bg-green-100 text-green-800' 
                : connectionStatus === 'error'
                ? 'bg-red-100 text-red-800'
                : 'bg-yellow-100 text-yellow-800'
            }`}>
              <div className={`w-2 h-2 rounded-full mr-2 ${
                connectionStatus === 'connected' 
                  ? 'bg-green-500' 
                  : connectionStatus === 'error'
                  ? 'bg-red-500'
                  : 'bg-yellow-500'
              }`}></div>
              {connectionStatus === 'connected' ? 'Connected' : 
               connectionStatus === 'error' ? 'Connection Error' : 'Connecting...'}
            </div>
          </div>

          <form onSubmit={handleUsernameSubmit}>
            <input
              type="text"
              placeholder="Enter your username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
            <button
              type="submit"
              disabled={connectionStatus !== 'connected'}
              className={`w-full p-3 rounded-lg transition duration-200 ${
                connectionStatus === 'connected'
                  ? 'bg-blue-500 text-white hover:bg-blue-600'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              Join Chat
            </button>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <Chat ws={ws} username={username} />
    </div>
  );
}

export default App;
```

### client/src/components/Chat.js
```javascript
import React, { useState, useEffect } from 'react';
import MessageList from './MessageList';
import MessageInput from './MessageInput';
import axios from 'axios';

const Chat = ({ ws, username }) => {
  const [messages, setMessages] = useState([]);
  const [onlineUsers, setOnlineUsers] = useState([]);

  useEffect(() => {
    // Load existing messages
    loadMessages();

    // WebSocket event listeners
    if (ws) {
      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        switch (data.type) {
          case 'receive_message':
            setMessages(prev => [...prev, data]);
            break;
            
          case 'user_joined':
            setOnlineUsers(prev => [...prev, data.username]);
            break;
            
          case 'user_left':
            setOnlineUsers(prev => prev.filter(user => user !== data.username));
            break;
            
          case 'online_users':
            setOnlineUsers(data.users);
            break;
            
          default:
            console.log('Unknown message type:', data.type);
        }
      };
    }

    return () => {
      if (ws) {
        ws.onmessage = null;
      }
    };
  }, [ws]);

  const loadMessages = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/messages');
      setMessages(response.data);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const sendMessage = (message) => {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({
        type: 'send_message',
        message,
        username
      }));
    }
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <div className="w-64 bg-white shadow-lg">
        <div className="p-4 border-b">
          <h2 className="text-lg font-semibold text-gray-800">Online Users</h2>
        </div>
        <div className="p-4">
          <div className="flex items-center mb-2">
            <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
            <span className="text-sm font-medium text-blue-600">{username} (You)</span>
          </div>
          {onlineUsers.map(user => (
            <div key={user} className="flex items-center mb-2">
              <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
              <span className="text-sm text-gray-600">{user}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white shadow-sm p-4 border-b">
          <h1 className="text-xl font-semibold text-gray-800">Chat Room</h1>
          <div className="text-sm text-gray-500">
            {ws && ws.readyState === WebSocket.OPEN ? (
              <span className="text-green-600">• Connected</span>
            ) : (
              <span className="text-red-600">• Disconnected</span>
            )}
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-hidden">
          <MessageList messages={messages} currentUser={username} />
        </div>

        {/* Input */}
        <MessageInput 
          onSendMessage={sendMessage} 
          disabled={!ws || ws.readyState !== WebSocket.OPEN}
        />
      </div>
    </div>
  );
};

export default Chat;
```

### client/src/components/MessageList.js
```javascript
import React, { useEffect, useRef } from 'react';

const MessageList = ({ messages, currentUser }) => {
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="flex-1 overflow-y-auto p-4 bg-gray-50">
      {messages.map((message) => (
        <div
          key={message.id}
          className={`mb-4 flex ${
            message.username === currentUser ? 'justify-end' : 'justify-start'
          }`}
        >
          <div
            className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
              message.username === currentUser
                ? 'bg-blue-500 text-white'
                : 'bg-white text-gray-800 shadow'
            }`}
          >
            {message.username !== currentUser && (
              <div className="text-xs font-semibold mb-1 text-blue-600">
                {message.username}
              </div>
            )}
            <div className="break-words">{message.content}</div>
            <div
              className={`text-xs mt-1 ${
                message.username === currentUser
                  ? 'text-blue-100'
                  : 'text-gray-500'
              }`}
            >
              {formatTime(message.createdAt)}
            </div>
          </div>
        </div>
      ))}
      <div ref={messagesEndRef} />
    </div>
  );
};

export default MessageList;
```

### client/src/components/MessageInput.js
```javascript
import React, { useState } from 'react';

const MessageInput = ({ onSendMessage, disabled }) => {
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim() && !disabled) {
      onSendMessage(message);
      setMessage('');
    }
  };

  return (
    <div className="bg-white border-t p-4">
      <form onSubmit={handleSubmit} className="flex space-x-2">
        <input
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder={disabled ? "Connecting..." : "Type your message..."}
          disabled={disabled}
          className={`flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : ''
          }`}
        />
        <button
          type="submit"
          disabled={disabled}
          className={`px-6 py-3 rounded-lg font-medium transition duration-200 ${
            disabled 
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-blue-500 text-white hover:bg-blue-600'
          }`}
        >
          Send
        </button>
      </form>
    </div>
  );
};

export default MessageInput;
```

### client/public/index.html
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Real-time Chat App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
```

### client/src/index.js
```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
```

## Setup Instructions

### 1. Initialize Project
```bash
mkdir chat-app
cd chat-app
mkdir server client
```

### 2. Setup Server
```bash
cd server
npm init -y
# Copy server/package.json content and run:
npm install
# Setup Prisma
npx prisma init
# Copy prisma/schema.prisma content
# Update .env with your PostgreSQL connection string
npx prisma db push
```

### 3. Setup Client
```bash
cd ../client
npx create-react-app .
npm install socket.io-client axios
# Setup Tailwind
npm install -D tailwindcss autoprefixer postcss
npx tailwindcss init -p
# Copy all client files
```

### 4. Run Application
```bash
# Terminal 1 - Server
cd server
npm run dev

# Terminal 2 - Client  
cd client
npm start
```

## Features
- Real-time messaging with WebSockets
- User authentication with username
- Message persistence with PostgreSQL
- Online users list
- Responsive design with Tailwind CSS
- Message timestamps
- Auto-scroll to latest messages

The app will be available at http://localhost:3000 with the server running on http://localhost:3001.